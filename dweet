var http=require("http");
var config=require("./config");
var client=require("./client");
var stub=require("/stub");

/**
 * A mix of all the other scripts into one class to make the code more reusable
 * @class Dweet
 * @constructor
 * @param {String} thingName : the thing name
 * @param {String} thingKey : the thing key (optional, obtained if thing is locked)
 * @throws Error
 */

function Dweet(thingName, thingKey){
  this.name=thingName;
  this.key = thingKey;
  this.client = new client.Client();
}

/**
 * Post a dweet
 * @method postDweet
 * @param {Object} [thingContent] : the content of the dweet to post. Can also be posted as a query string ("param1=value1&param2=value3")
 * @param {boolean} quiet: successful dweets result in an HTTP 204 response
 * @return {Object} dweet
 * @throws Error
 */

Dweet.prototype.postDweet=function(thingContent,quiet){
  
  if(!thingContent){
    throw {
      erroCode: "Missing_Parameter",
      errorDetail: "thingContent cannot be null or empty."
    }
  }
  
  if(typeof(thingContent) == "string") {
    thingContent = _parseQueryStr(thingContent);
  }else {
    
  	if(typeof(thingContent) != "object" || Object.keys(thingContent).length==0){
      throw {
        erroCode: "Invalid_Parameter",
        errorDetail: "thingContent has to be a non-empty JSON object."
      }
    }
  }  
  
  if(!quiet){
  	var url=config.postURL + this.name;
  	var query={
   	 url:url,
   	 method:"POST",
   	 params:thingContent
    }
  }else {
    var url=config.postQuietlyURL + this.name;
    var query={
      url:url,
      method:"POST",
      params:thingContent
    }
  }
  return this.client.callApi(query);
}

/**
 * Get all the dweets of a thing
 * @method getLatestDweet
 * @return {Object} dweet
 * @throws Error
 */

Dweet.prototype.getLatestDweet = function(){ 
  
  if(config.mode=="stub"){
    return stub.getDweet();
  } else {
    
    var url=config.getLatestDweetURL + this.name;
    var query={
      url:url
    };
       
    return this.client.callApi(query).with;
  }
};

/**
 * Get all the dweets of a thing
 * @method listLatestDweets
 * @return {Array} dweet
 * @throws Error
 */

Dweet.prototype.listLatestDweets = function(){ 
  
  if(config.mode=="stub"){
    return stub.getDweet();
  } else {
    
    var url=config.listLatestDweetsURL + this.name;
    var query={
      url:url
    };
       
    return this.client.callApi(query).with;
  }
};

/**
 * Add an alert on a device. Everytime the device publishes data, the expression is avaluated against it. 
 * If evaluating the expression is true, an email is sent to all recipients.
 * Expression can return true/false ("dweet.temp > 22") or a string ("if (dweet.temp > 33 && dweet.humidity > 80) return \"tropical\";") 
 * Note: only available for locked devices
 * @method addAlert
 * @param {Object} [dto]
 * @param {String} [dto.recipients]: a comma separated list of emails (can also be sent as an array)
 * @param {String} [dto.expression]:  a JavaScript expression  
 */

Dweet.prototype.addAlert = function(dto) {  
  
  if (!dto || !dto.recipients || !dto.expression){
      
    throw {
      erroCode: "Invalid_Parameter",
      errorDetail: "dto.recipients and dto.expression are mandatory"
    };
  }
  
  var to = encodeURIComponent(dto.recipients.toString());
  var url = config.alertURL + to + "/when/" + this.name + "/" +  encodeURIComponent(dto.expression);
  var query={
    url:url,
    params: {"key":this.key}  
    };
       
  return this.client.callApi(query).with;    
};

/**
 * @method removeAlert
 */
Dweet.prototype.removeAlert = function() {  
  
  var url = config.removeAlertURL + this.name;
  var query={
    url:url,
    params: {"key":this.key}  
    };
       
  return this.client.callApi(query).with;    
};

function _parseQueryStr(querystr) {
  
  var keyvalues = querystr.split("&");
  var obj = {};
  for (var index in keyvalues) {

    var tuple = keyvalues[index];console.log(keyvalues[index])
    var kv = tuple.split("=");
    obj[kv[0]] = kv[1];
  }

  return obj;
}